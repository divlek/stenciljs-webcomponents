/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  MatchResults,
} from '@stencil/router';

export namespace Components {
  interface AppHome {}
  interface AppProfile {
    'match': MatchResults;
  }
  interface TfAppRoot {}
  interface TfTree {
    'getSelectedNode': () => Promise<HTMLTfTreeviewItemElement>;
  }
  interface TfTreeviewItem {
    'collapseAll': () => Promise<void>;
    /**
    * This property can be used to carry around a reference to an object or unique identifier for this node's data.
    */
    'data'?: any;
    'expandAll': () => Promise<void>;
    /**
    * Gets or sets a value specifying whether this item is expanded and showing its children
    */
    'expanded': boolean;
    /**
    * The header text to display for this item.
    */
    'header'?: string;
    /**
    * Specifies that this item in the tree is a leaf and cannot be expanded
    */
    'leaf': boolean;
    /**
    * This property is to set if the node item is loading its children. Shows a spinner indiciator in place of expand/collapse
    */
    'loading'?: boolean;
    'setFocus': () => Promise<void>;
    'unFocus': () => Promise<void>;
  }
}

declare global {


  interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {}
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };

  interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {}
  var HTMLAppProfileElement: {
    prototype: HTMLAppProfileElement;
    new (): HTMLAppProfileElement;
  };

  interface HTMLTfAppRootElement extends Components.TfAppRoot, HTMLStencilElement {}
  var HTMLTfAppRootElement: {
    prototype: HTMLTfAppRootElement;
    new (): HTMLTfAppRootElement;
  };

  interface HTMLTfTreeElement extends Components.TfTree, HTMLStencilElement {}
  var HTMLTfTreeElement: {
    prototype: HTMLTfTreeElement;
    new (): HTMLTfTreeElement;
  };

  interface HTMLTfTreeviewItemElement extends Components.TfTreeviewItem, HTMLStencilElement {}
  var HTMLTfTreeviewItemElement: {
    prototype: HTMLTfTreeviewItemElement;
    new (): HTMLTfTreeviewItemElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
    'app-profile': HTMLAppProfileElement;
    'tf-app-root': HTMLTfAppRootElement;
    'tf-tree': HTMLTfTreeElement;
    'tf-treeview-item': HTMLTfTreeviewItemElement;
  }
}

declare namespace LocalJSX {
  interface AppHome {}
  interface AppProfile {
    'match'?: MatchResults;
  }
  interface TfAppRoot {}
  interface TfTree {
    /**
    * Raised when the focused node is changed.
    */
    'onFocusChanged'?: (event: CustomEvent<{
      oldValue: { element: HTMLTfTreeviewItemElement; data: any } | null;
      newValue: { element: HTMLTfTreeviewItemElement; data: any } | null;
    }>) => void;
    /**
    * Raised when the focused node is selected, when user presses key 'Enter'.
    */
    'onSelectionChanged'?: (event: CustomEvent<{
      element: HTMLTfTreeviewItemElement;
      data: any;
    }>) => void;
  }
  interface TfTreeviewItem {
    /**
    * This property can be used to carry around a reference to an object or unique identifier for this node's data.
    */
    'data'?: any;
    /**
    * Gets or sets a value specifying whether this item is expanded and showing its children
    */
    'expanded'?: boolean;
    /**
    * The header text to display for this item.
    */
    'header'?: string;
    /**
    * Specifies that this item in the tree is a leaf and cannot be expanded
    */
    'leaf'?: boolean;
    /**
    * This property is to set if the node item is loading its children. Shows a spinner indiciator in place of expand/collapse
    */
    'loading'?: boolean;
    /**
    * Raised when the expanded state of this item changes. This can be used to dynamically load the children or even remove the children.
    */
    'onExpandedChanged'?: (event: CustomEvent<{
      element: HTMLTfTreeviewItemElement;
      expanded: boolean;
      data: any;
    }>) => void;
    'onNodeSelected'?: (event: CustomEvent<{
      element: HTMLTfTreeviewItemElement;
      data: any;
    }>) => void;
    /**
    * Event emitted when mouseout the item. Returns an object which has reference to the context menu HTMLElement and the node data. Can be used to render context menu icon launcher.
    */
    'onTfTreeItemMouseOut'?: (event: CustomEvent<{
      element: HTMLTfTreeviewItemElement;
      data: any;
    }>) => void;
    /**
    * Event emitted when mouseover the node item. Returns an object which has reference to the context menu HTMLElement and the node data. Can be used to render context menu icon launcher.
    */
    'onTfTreeItemMouseOver'?: (event: CustomEvent<{
      element: HTMLTfTreeviewItemElement;
      data: any;
    }>) => void;
  }

  interface IntrinsicElements {
    'app-home': AppHome;
    'app-profile': AppProfile;
    'tf-app-root': TfAppRoot;
    'tf-tree': TfTree;
    'tf-treeview-item': TfTreeviewItem;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'app-home': LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
      'app-profile': LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
      'tf-app-root': LocalJSX.TfAppRoot & JSXBase.HTMLAttributes<HTMLTfAppRootElement>;
      'tf-tree': LocalJSX.TfTree & JSXBase.HTMLAttributes<HTMLTfTreeElement>;
      'tf-treeview-item': LocalJSX.TfTreeviewItem & JSXBase.HTMLAttributes<HTMLTfTreeviewItemElement>;
    }
  }
}


