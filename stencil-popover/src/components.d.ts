/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  MatchResults,
} from '@stencil/router';

export namespace Components {
  interface AppHome {}
  interface AppProfile {
    'match': MatchResults;
  }
  interface AppRoot {}
  interface HelloWorldComponent {
    'name': string;
  }
  interface MySmallComponent {}
  interface TfPopover {
    /**
    * This property is used to set the selection string of target element. For eg:- '#my-div'
    */
    'for': HTMLElement | string;
    /**
    * This property is used to set the positioning of the popover
    */
    'placement': 'top' | 'right' | 'bottom' | 'left';
    /**
    * Used to adjust the zIndex
    */
    'zIndex': number;
  }
  interface TfPopup {
    'closeOnClickOut': boolean;
    'placement'?: 'auto-start' | 'auto' | 'auto-end' | 'top-start' | 'top' | 'top-end' | 'right-start' | 'right'
    | 'right-end' | 'bottom-end' | 'bottom' | 'bottom-start' | 'left-end' | 'left' | 'left-start';
    'relativeTo'?: HTMLElement | string | { clientHeight: number, clientWidth: number, getBoundingClientRect(): ClientRect };
    'showArrow': boolean;
  }
  interface TfPopupHost {
    'closeOnClickOut': boolean;
    'showArrow': boolean;
  }
}

declare global {


  interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {}
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };

  interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {}
  var HTMLAppProfileElement: {
    prototype: HTMLAppProfileElement;
    new (): HTMLAppProfileElement;
  };

  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLHelloWorldComponentElement extends Components.HelloWorldComponent, HTMLStencilElement {}
  var HTMLHelloWorldComponentElement: {
    prototype: HTMLHelloWorldComponentElement;
    new (): HTMLHelloWorldComponentElement;
  };

  interface HTMLMySmallComponentElement extends Components.MySmallComponent, HTMLStencilElement {}
  var HTMLMySmallComponentElement: {
    prototype: HTMLMySmallComponentElement;
    new (): HTMLMySmallComponentElement;
  };

  interface HTMLTfPopoverElement extends Components.TfPopover, HTMLStencilElement {}
  var HTMLTfPopoverElement: {
    prototype: HTMLTfPopoverElement;
    new (): HTMLTfPopoverElement;
  };

  interface HTMLTfPopupElement extends Components.TfPopup, HTMLStencilElement {}
  var HTMLTfPopupElement: {
    prototype: HTMLTfPopupElement;
    new (): HTMLTfPopupElement;
  };

  interface HTMLTfPopupHostElement extends Components.TfPopupHost, HTMLStencilElement {}
  var HTMLTfPopupHostElement: {
    prototype: HTMLTfPopupHostElement;
    new (): HTMLTfPopupHostElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
    'app-profile': HTMLAppProfileElement;
    'app-root': HTMLAppRootElement;
    'hello-world-component': HTMLHelloWorldComponentElement;
    'my-small-component': HTMLMySmallComponentElement;
    'tf-popover': HTMLTfPopoverElement;
    'tf-popup': HTMLTfPopupElement;
    'tf-popup-host': HTMLTfPopupHostElement;
  }
}

declare namespace LocalJSX {
  interface AppHome {}
  interface AppProfile {
    'match'?: MatchResults;
  }
  interface AppRoot {}
  interface HelloWorldComponent {
    'name'?: string;
  }
  interface MySmallComponent {}
  interface TfPopover {
    /**
    * This property is used to set the selection string of target element. For eg:- '#my-div'
    */
    'for'?: HTMLElement | string;
    /**
    * This event will be thrown when user clicks anywhere outside the popover content
    */
    'onClosed'?: (event: CustomEvent<void>) => void;
    /**
    * This property is used to set the positioning of the popover
    */
    'placement'?: 'top' | 'right' | 'bottom' | 'left';
    /**
    * Used to adjust the zIndex
    */
    'zIndex'?: number;
  }
  interface TfPopup {
    'closeOnClickOut'?: boolean;
    'onClosed'?: (event: CustomEvent<void>) => void;
    'placement'?: 'auto-start' | 'auto' | 'auto-end' | 'top-start' | 'top' | 'top-end' | 'right-start' | 'right'
    | 'right-end' | 'bottom-end' | 'bottom' | 'bottom-start' | 'left-end' | 'left' | 'left-start';
    'relativeTo'?: HTMLElement | string | { clientHeight: number, clientWidth: number, getBoundingClientRect(): ClientRect };
    'showArrow'?: boolean;
  }
  interface TfPopupHost {
    'closeOnClickOut'?: boolean;
    'onClosed'?: (event: CustomEvent<void>) => void;
    'showArrow'?: boolean;
  }

  interface IntrinsicElements {
    'app-home': AppHome;
    'app-profile': AppProfile;
    'app-root': AppRoot;
    'hello-world-component': HelloWorldComponent;
    'my-small-component': MySmallComponent;
    'tf-popover': TfPopover;
    'tf-popup': TfPopup;
    'tf-popup-host': TfPopupHost;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'app-home': LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
      'app-profile': LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
      'app-root': LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
      'hello-world-component': LocalJSX.HelloWorldComponent & JSXBase.HTMLAttributes<HTMLHelloWorldComponentElement>;
      'my-small-component': LocalJSX.MySmallComponent & JSXBase.HTMLAttributes<HTMLMySmallComponentElement>;
      'tf-popover': LocalJSX.TfPopover & JSXBase.HTMLAttributes<HTMLTfPopoverElement>;
      'tf-popup': LocalJSX.TfPopup & JSXBase.HTMLAttributes<HTMLTfPopupElement>;
      'tf-popup-host': LocalJSX.TfPopupHost & JSXBase.HTMLAttributes<HTMLTfPopupHostElement>;
    }
  }
}


